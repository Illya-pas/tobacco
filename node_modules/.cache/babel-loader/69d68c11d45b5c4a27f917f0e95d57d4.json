{"ast":null,"code":"import { ADD_FILTER, REMOVE_FILTER, FETCH_PAPER, FETCH_HILZY, FETCH_FILTERS, FETCH_AROMA, FETCH_MASHINE } from \"../types\";\nconst initialState = {\n  paper: [],\n  hilzy: [],\n  filter: [],\n  aroma: [],\n  mashine: [],\n  total: 0,\n  filters: [{\n    name: \"paper\",\n    filters: []\n  }, {\n    name: \"hilzy\",\n    filters: []\n  }, {\n    name: \"filter\",\n    filters: []\n  }, {\n    name: \"aroma\",\n    filters: []\n  }, {\n    name: \"mashine\",\n    filters: []\n  }]\n};\nexport const cardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PAPER:\n      return { ...state,\n        paper: action.payload\n      };\n\n    case FETCH_HILZY:\n      return { ...state,\n        hilzy: action.payload\n      };\n\n    case FETCH_FILTERS:\n      return { ...state,\n        filter: action.payload\n      };\n\n    case FETCH_AROMA:\n      return { ...state,\n        aroma: action.payload\n      };\n\n    case FETCH_MASHINE:\n      return { ...state,\n        mashine: action.payload\n      };\n\n    case ADD_FILTER:\n      let copiedFilters = [...state.filters];\n      copiedFilters.map((fil, index) => {\n        if (fil.name === action.payload.type) {\n          fil.filters.push(action.payload.name);\n          copiedFilters.splice(index, 1, fil);\n        }\n      });\n      return { ...state,\n        filters: copiedFilters\n      };\n\n    case REMOVE_FILTER:\n      let copyFilters = [...state.filters];\n      copyFilters.map((fil, index) => {\n        if (fil.name === action.payload.type) {\n          fil.filters.map((lftr, index) => {\n            if (lftr === action.payload.name) {\n              fil.filters.splice(index, 1);\n            }\n          });\n          copyFilters.splice(index, 1, fil);\n        }\n      });\n      return { ...state,\n        filters: copyFilters\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/gh0st/Downloads/PROJECTS/REACT/tobacco/src/redux/reducers/cardReducer.js"],"names":["ADD_FILTER","REMOVE_FILTER","FETCH_PAPER","FETCH_HILZY","FETCH_FILTERS","FETCH_AROMA","FETCH_MASHINE","initialState","paper","hilzy","filter","aroma","mashine","total","filters","name","cardReducer","state","action","type","payload","copiedFilters","map","fil","index","push","splice","copyFilters","lftr"],"mappings":"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","sourcesContent":["import {\n\tADD_FILTER,\n\tREMOVE_FILTER,\n\tFETCH_PAPER,\n\tFETCH_HILZY,\n\tFETCH_FILTERS,\n\tFETCH_AROMA,\n\tFETCH_MASHINE,\n} from \"../types\";\n\nconst initialState = {\n\tpaper: [],\n\thilzy: [],\n\tfilter: [],\n\taroma: [],\n\tmashine: [],\n\ttotal: 0,\n\tfilters: [\n\t\t{\n\t\t\tname: \"paper\",\n\t\t\tfilters: [],\n\t\t},\n\t\t{\n\t\t\tname: \"hilzy\",\n\t\t\tfilters: [],\n\t\t},\n\t\t{\n\t\t\tname: \"filter\",\n\t\t\tfilters: [],\n\t\t},\n\t\t{\n\t\t\tname: \"aroma\",\n\t\t\tfilters: [],\n\t\t},\n\t\t{\n\t\t\tname: \"mashine\",\n\t\t\tfilters: [],\n\t\t},\n\t],\n};\n\nexport const cardReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_PAPER:\n\t\t\treturn { ...state, paper: action.payload };\n\n\t\tcase FETCH_HILZY:\n\t\t\treturn { ...state, hilzy: action.payload };\n\n\t\tcase FETCH_FILTERS:\n\t\t\treturn { ...state, filter: action.payload };\n\n\t\tcase FETCH_AROMA:\n\t\t\treturn { ...state, aroma: action.payload };\n\n\t\tcase FETCH_MASHINE:\n\t\t\treturn { ...state, mashine: action.payload };\n\n\t\tcase ADD_FILTER:\n\t\t\tlet copiedFilters = [...state.filters];\n\t\t\tcopiedFilters.map((fil, index) => {\n\t\t\t\tif (fil.name === action.payload.type) {\n\t\t\t\t\tfil.filters.push(action.payload.name);\n\t\t\t\t\tcopiedFilters.splice(index, 1, fil);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn { ...state, filters: copiedFilters };\n\n\t\tcase REMOVE_FILTER:\n\t\t\tlet copyFilters = [...state.filters];\n\t\t\tcopyFilters.map((fil, index) => {\n\t\t\t\tif (fil.name === action.payload.type) {\n\t\t\t\t\tfil.filters.map((lftr, index) => {\n\t\t\t\t\t\tif (lftr === action.payload.name) {\n\t\t\t\t\t\t\tfil.filters.splice(index, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tcopyFilters.splice(index, 1, fil);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn { ...state, filters: copyFilters };\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}